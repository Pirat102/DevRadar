
services:
  django:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    image: app-image  
    container_name: django-container
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres-container
    env_file:
    - ./backend/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: "redis:alpine"
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped


  celery_worker:
    image: app-image   
    deploy:
      replicas: 4
    command: celery -A backend worker 
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - django
    restart: unless-stopped

  celery_beat:
    image: app-image  
    container_name: celery-beat-container
    command: celery -A backend beat -l info
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - django
    restart: unless-stopped

  flower:
    image: app-image
    container_name: flower-container
    command: celery -A backend flower 
    env_file:
    - ./backend/.env
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend-image
    container_name: frontend-container
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    env_file:
      - ./frontend/.env
    depends_on:
      - django
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: